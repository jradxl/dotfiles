# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
# 20240610c

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# .bashrc file from Chezmoi
echo "Chezmoi: START .bashrc"

pathmunge () {
    case ":${PATH}:" in
        *:"$1":*)
            ;;
        *)
            if [ "$2" = "after" ] ; then
                PATH=$PATH:$1
            else
                PATH=$1:$PATH
            fi
    esac
}

get-github-latest () {
    git ls-remote --tags --sort=v:refname $1 | grep -v "rc" | grep -v "{}"  | grep -v "release" | tail -n 1 | tr -d '[:space:]' |  rev | cut -d/ -f1 | rev
}

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -alF'
alias ll='eza -alF'
alias la='ls -A'
alias l='ls -CF'
alias czm='chezmoi'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

export EDITOR="zed --wait"

##export PATH="$HOME/bin:$PATH"
pathmunge "$HOME/bin"
pathmunge "$HOME/.local/bin"
pathmunge "$HOME/.rd/bin"
##export PATH="/opt/nvim-linux64/bin:$PATH"
pathmunge "/opt/nvim-linux64/bin"
##export PATH="/home/jradley/.local/share/JetBrains/Toolbox/agoland/bin/:$PATH"
pathmunge "$HOME/.local/share/JetBrains/Toolbox/apps/goland/bin/"
pathmunge "$HOME/podman/bin"
pathmunge "$HOME/lima/bin"
pathmunge "$HOME/.rye/shims"

#NOT USED . "$HOME/.rye/env"
. "$HOME/.cargo/env"

########### KEYCHAIN START #################
## Logic to run once per day
export LOCK="$HOME/.runonce-lock"

#echo "JSR1"
if [[ "$(pwd)" == "$HOME" ]]; then
    ##Test If run already today
    SHOULDRUN="N"
    if [[ ! -e "$LOCK" ]]; then  # no lock - command run for the first time
        #"$@"
        touch "$LOCK"
        SHOULDRUN="Y"
        #echo "JSR2"
    else                         # lock exists
        #echo "JSR3"
        if [[ "$(find "$LOCK" -mmin +720)" ]]; then
            #"$@"
            SHOULDRUN="Y"
            touch "$LOCK"
            #echo "JSR4"
        fi
    fi
    #echo "JSR5"
    #echo "SHOULDRUN: $SHOULDRUN"
    if [[ "$SHOULDRUN" == "Y" ]]; then
        echo ""
        eval $(keychain --clear --gpg2 --nogui --noask --eval --agents ssh,gpg)
        ##$HOME/scripts/go-version.sh
        #$HOME/.local/bin/go-version-user.sh
        echo ""
        echo "Latest Node Version:    $(get-github-latest https://github.com/nodejs/node)"
        echo "Installed node version: $(node -v)"
        echo "Installed npm version:  $(npm -v)"
        echo "Installed npx version:  $(npx -v)"
        echo "Installed rustc version:  $(rustc -V)"
        echo "Installed cargo version:  $(cargo -V)"
        rye self update
        chezmoi upgrade
        echo ""
    else
        echo ""
        eval $(keychain --gpg2 --nogui --noask --eval --agents ssh,gpg)
        #keychain --gpg2 --nogui --noask --eval --agents ssh,gpg
        keychain --list
        echo "Latest Chezmoi Version: $(get-github-latest https://github.com/twpayne/chezmoi)"
        echo "Installed Chezmoi Version: $(chezmoi --version)"
        echo "Installed Rye version: $(rye --version)"
        echo "Installed Python version (Rye): $(python -V)"
        chezmoi upgrade
        #ssh-add -l
    fi
fi

if [[ -z "$HOSTNAME" ]]; then
  HOSTNAME=$(uname -n)
fi
if [[ -f $HOME/.keychain/$HOSTNAME-sh ]]; then
  source $HOME/.keychain/$HOSTNAME-sh
fi
if [[ -f $HOME/.keychain/$HOSTNAME-sh-gpg ]]; then
  source $HOME/.keychain/$HOSTNAME-sh-gpg
fi

########### KEYCHAIN END #################

##export DOCKER_HOST=unix:///run/user/1000/docker.sock
export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock
export DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}

# Password Store
# export PASSWORD_STORE_GPG_OPTS=--pinentry-mode=loopback
# export PASSWORD_STORE_GPG_OPTS=--pinentry-mode=ask

##NOTES PinEntry
## apt install pinentry-curses
## apt install pinentry-tty
## update-alternatives --config pinentry
## Select TTY
GPG_TTY=$(tty)
echo "Current TTY: $GPG_TTY"
export GPG_TTY
echo "ChezMoi Alias: czm"

echo "Chezmoi: End .bashrc"
