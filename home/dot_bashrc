# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples
# 20250416A

## CHEZMOI supported: https://www.chezmoi.io/
## Install on new machine as: sh -c "$(curl -fsLS get.chezmoi.io)" -- init --apply $GITHUB_USERNAME

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# .bashrc file from Chezmoi
echo "Chezmoi: START .bashrc"
. "$HOME/.chezmoi-pac"

export UUID=$(id -u $USER)
export GGID=$(id -g $USER)
echo "User, UID and GID is: $USER;$UUID;$GGID"
export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$UID/bus

pathmunge () {
    case ":${PATH}:" in
        *:"$1":*)
            ;;
        *)
            if [ "$2" = "after" ] ; then
                PATH="$PATH:$1"
            else
                PATH="$1:$PATH"
            fi
    esac
}

get-github-latest () {
    git ls-remote --tags --sort=v:refname $1 | grep -v "rc" | grep -v "{}"  | grep -v "release" | tail -n 1 | tr -d '[:space:]' |  rev | cut -d/ -f1 | rev
}

echo ""
echo "Waiting for network..."
echo ""
wait4network() {
    local serverAdr="github.com"
    local count=0
    local count_max=20
    
    echo -e "\e[1A\e[K$(date): testing connection [$count/$count_max] - ${serverAdr}"
    ping -c 1 $serverAdr > /dev/null 2>&1    
    while [[ $? -ne 0 ]]; do
      let "count+=1"
      echo -e "\e[1A\e[K$(date): testing connection [$count/$count_max] - ${serverAdr}"
      sleep 2
      if [[ ${count} -gt ${count_max} ]]; then
        break
      fi
      ping -c 1 $serverAdr > /dev/null 2>&1
    done

    echo "$(date): Connected - ${serverAdr}"
}
wait4network

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
#HISTSIZE=1000
#HISTFILESIZE=2000

HISTSIZE=-1
HISTFILESIZE=-1

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
    #PS1='\033[01;31m\]─[\[\u\033[01;33m\]@\033[01;36m\]\h\033[01;31m\]]-[\033[01;32m\]\w\033[01;31m\]]\n─$ \033[00m\]'
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

#export PS1="\n[\w]\n\u@\h $ "

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -alF'
alias ll='eza -alF'
alias la='ls -A'
alias l='ls -CF'
alias czm='chezmoi'
alias czmcd='cd ~/.local/share/chezmoi'
alias et='electerm'
alias mr='micro'
alias pls='pulsar'
alias sctl='systemctl'
alias pn='pnpm'
alias ppp='pulsar'
alias pya='source .venv/bin/activate'
alias neovim=nvim
alias fxa="flox activate"

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

[[ -f ~/.bash_aliases ]] && . ~/.bash_aliases

## INFO Alias Completion.
# Install git clone -o complete_alias https://github.com/cykerway/complete-alias.git
# mv complete_alias .complete_alias
# echo ". $HOME/.complete_alias/complete_alias" >> ~/.bash_completion
# echo "complete -F _complete_alias sctl" >> $HOME/.complete_alias/complete_alias
# Note that 'complete' is a bash internal command
##

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#Local User Bash_completions are a bit confusing so I create my own
if [[ -d "$HOME/.bash_completion.d" ]]; then
    echo "Adding custom completions ..."
    for bcfile in "$HOME/.bash_completion.d"/* ; do
        if [[ -f "$bcfile" ]]; then
            echo "    Doing $bcfile ..."
            . $bcfile
        fi
    done
else
    echo  "Creating custom bash_completion.d"
    mkdir "$HOME"/.bash_completion.d
fi

export EDITOR="micro"
#export EDITOR="zed --wait"
#export EDITOR="nano"

# pnpm
export PNPM_HOME="/home/jradley/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

##export PATH="$HOME/bin:$PATH"
pathmunge "$HOME/bin"
pathmunge "$HOME/.local/bin"
pathmunge "$HOME/.rd/bin"
##export PATH="/opt/nvim-linux64/bin:$PATH"
pathmunge "/opt/nvim-linux64/bin"
##export PATH="/home/jradley/.local/share/JetBrains/Toolbox/agoland/bin/:$PATH"
pathmunge "$HOME/.local/share/JetBrains/Toolbox/apps/goland/bin/"
pathmunge "$HOME/podman/bin"
pathmunge "$HOME/lima/bin"

##Use uv pathunge "$HOME/.rye/shims"
##Use uv [[ -f "$HOME/.rye/env" ]] && . "$HOME/.rye/env"

#Not using Modular export PATH="$PATH:/home/jradley/.modular/bin"

[[ -f "$HOME/.cargo/bin" ]]                  && pathmunge "$HOME/.cargo/bin"
[[ -f "$HOME/.cargo/env" ]]                  && . "$HOME/.cargo/env"
[[ -f "$HOME/.local/share/swiftly/env.sh" ]] && . "$HOME/.local/share/swiftly/env.sh"
if [[ -f "$HOME/.deno/bin/deno" ]]; then
    pathmunge "${HOME}/.deno/bin"
    "$HOME"/.deno/bin/deno completions bash > "$HOME/.bash_completion.d/deno_completion"
fi

#https://medium.com/@sahaidachnyi/standard-environment-variables-in-golang-2bcb1b869bae
#https://go.dev/blog/get-familiar-with-workspaces
if [[ -s "${HOME}/.g/env" ]]; then
    #[ -s "${HOME}/.g/env" ] && \. "${HOME}/.g/env"  # g shell setup
    #A more explicit version of . "${HOME}/.g/env" is preferred.
    #export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
    pathmunge "${HOME}/go/bin"
    pathmunge "${HOME}/.g/go/bin"
    pathmunge "${HOME}/.g/bin"
    export G_MIRROR=https://golang.google.cn/dl/
    #.g/go is sym link to $HOME/.g/versions/<goversion>
    #export GOROOT=/home/jradley/.g/versions/1.23.2
    export GOROOT="${HOME}/.g/go"
    #GOPATH deprecated
    export GOPATH="$HOME"/go
    #GOWORK ???
fi

##This is a fussy installer. .nvm dir needs to pre exist.
##Assumed to be already installed, hence check for upgrade.
export NVM_DIR="$HOME/.nvm"
mkdir -p "$NVM_DIR"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

########### KEYCHAIN START #################

## Logic to run once per day
export LOCK="$HOME/.runonce-lock"

#echo "JSR1"
if [[ "$(pwd)" == "$HOME" ]]; then
    ##Test If run already today
    SHOULDRUN="N"
    if [[ ! -e "$LOCK" ]]; then  # no lock - command run for the first time
        #"$@"
        touch "$LOCK"
        SHOULDRUN="Y"
        #echo "JSR2"
    else                         # lock exists
        #echo "JSR3"
        if [[ "$(find "$LOCK" -mmin +720)" ]]; then
            #"$@"
            SHOULDRUN="Y"
            touch "$LOCK"
            #echo "JSR4"
        fi
    fi
    #echo "JSR5"
    #echo "SHOULDRUN: $SHOULDRUN"
    if [[ "$SHOULDRUN" == "Y" ]]; then
        echo "RUN ONCE TODAY"
        eval $(keychain --clear --gpg2 --nogui --noask --eval --agents ssh,gpg)
        
        echo "Latest Chezmoi Version:    $(get-github-latest https://github.com/twpayne/chezmoi)"
        echo "Installed Chezmoi Version: $(chezmoi --version  | awk '{print $3}')"
                
        if [[ $(command -v chezmoi )  ]]; then
            echo "Upgrading Chezmoi, if needed..."
            chezmoi upgrade
        fi

        #This is intentionally not sourced, so script 
        # can be run independently. Master copy held in Github.
        RUNONCE="NO"
        RUNONCESCRIPT="$HOME"/.local/share/chezmoi/home-other/scripts/run-once.sh
        if [[  -f $RUNONCESCRIPT ]]  && [[ -x $RUNONCESCRIPT ]]; then
            echo "RUN-ONCE script is found and is executable...";
            "$RUNONCESCRIPT"
        else
            echo "ERROR: RUN-ONCE script is not available."
        fi
    else
        echo "RUN TODAY"
        eval $(keychain --gpg2 --nogui --noask --eval --agents ssh,gpg)
        keychain --list
    fi
fi

echo ""
echo "Showing versions of all installed Apps....#"

if [[ $(command -v direnv )    ]]; then
    #Make sure it appears even after rvm, git-prompt and other shell extensions that manipulate the prompt.
    eval "$(direnv hook bash)"
    echo "Installed DIRENV version: $(direnv version)"
fi
##Use uv [[ $(command -v rye )    ]] && echo "Installed RYE version: $(rye --version)"
[[ $(command -v python ) ]] && echo "Installed PYTHON version: $(python -V)"
[[ $(command -v go )     ]] && echo "Installed GOLANG version: $(go version)"
[[ $(command -v nvm )    ]] && echo "Installed NVM Version: $(nvm --version)"
[[ $(command -v node )   ]] && echo "Installed NODE version: $(node -v)"
[[ $(command -v npm )    ]] && echo "Installed NPM version:  $(npm -v)"
[[ $(command -v npx )    ]] && echo "Installed NPX version:  $(npx -v)"
[[ $(command -v rustc )  ]] && echo "Installed RUSTC version:  $(rustc -V)"
[[ $(command -v cargo )  ]] && echo "Installed CARGO version:  $(cargo -V)"
[[ $(command -v uv )     ]] && echo "Installed UV version:  $(uv -V)"
[[ $(command -v deno )   ]] && echo "Installed DENO version:  $(deno --version)"
[[ $(command -v pnpm )   ]] && echo "Installed PNPM version:  $(pnpm --version)"
[[ $(command -v fzf )    ]] && echo "Installed FZF version:  $(fzf --version)"
[[ $(command -v lua )      ]] && echo "Installed LUA version:  $(lua -v | awk '{print $2}')"
[[ $(command -v luarocks ) ]] && echo "Installed LUAROCKS version:  $(luarocks --version | grep luarocks | awk '{print $2}')"

[[ -z "$HOSTNAME" ]]                      && HOSTNAME=$(uname -n)
[[ -f $HOME/.keychain/$HOSTNAME-sh ]]     && source $HOME/.keychain/$HOSTNAME-sh
[[ -f $HOME/.keychain/$HOSTNAME-sh-gpg ]] && source $HOME/.keychain/$HOSTNAME-sh-gpg

########### KEYCHAIN END #################

echo ""

### RUBY ###
echo "Ruby settings..."
if [[ -f "$HOME"/.ruby-method ]]; then  
	RUBY_METHOD=$(cat "$HOME"/.ruby-method )
	case "$RUBY_METHOD" in
	"ruby-full") echo "    Ruby-Method: Ubuntu Packages";;
	"rbenv")     echo "    Ruby-Method: Using rbenv";;
	*)           echo "    ERROR: Unknown value in .ruby-method file: <$RUBY_METHOD>";;
	esac
 else
	echo "    No .ruby-method file found, creating..."
	echo "rbenv" > "$HOME"/.ruby-method
	RUBY_METHOD="rbenv"
fi

if [[ $RUBY_METHOD ==  "ruby-full" ]]; then
    #Ruby Ubuntu Package
    if [[ $(dpkg -s ruby-full) ]]; then
        echo "Ubuntu ruby-full package is installed"
        [[ $(command -v ruby ) ]] && echo "Installed native Ruby version:  $(ruby --version)"
        [[ $(command -v gem ) ]] && echo "Installed native Gem version:  $(gem --version)"
    else
        echo "Ubuntu ruby-full package not installed"
    fi
fi

if [[ $RUBY_METHOD ==  "rbenv" ]]; then
    if [[ ! $(command -v rbenv) && ! -d "$HOME/.rbenv" ]]; then
        echo "Installing rbenv..."
        git clone https://github.com/rbenv/rbenv.git ~/.rbenv
        git clone https://github.com/rbenv/ruby-build.git "$HOME/.rbenv"/plugins/ruby-build
    fi
    eval "$(~/.rbenv/bin/rbenv init - --no-rehash bash)"
    export RBENV_ROOT=$(rbenv root)
    git -C "$(rbenv root)"/plugins/ruby-build pull    
fi

# Install Ruby Gems to ~/gems
export GEM_HOME="$HOME/gems"
#export PATH="$HOME/gems/bin:$PATH"
if [[ -d "$GEM_HOME" ]]; then
    echo "GEMS dir found..."
    pathmunge "${HOME}/gems/bin"
else
    echo "No GEMS dir found"
fi

echo "Ruby settings end"
echo ""
[[ $(command -v rbenv )  ]] && echo "Installed RBENV version:  $(rbenv --version)"
[[ $(command -v ruby )   ]] && echo "Installed RUBY version:  $(ruby -v)"
[[ $(command -v gem )    ]] && echo "Installed GEM version:  $(gem -v)"
echo ""

### RUBY END ###

##PYENV Discontinued
#https://realpython.com/python313-free-threading-jit/
#PYTHON_CONFIGURE_OPTS='--enable-experimental-jit' pyenv install 3.13t
#chmod 755 jradxl && rye toolchain register /home/jradxl/.pyenv/versions/3.13.0/bin/python
#export PYENV_ROOT="$HOME/.pyenv"
#if [[ -d $PYENV_ROOT/bin ]]; then
#    pathmunge "${HOME}/.pyenv/bin"
#    echo "Installed PYENV version: $(pyenv --version)"
#fi
#eval "$(pyenv init -)"
#eval "$(pyenv virtualenv-init -)"
##PYENV End


##Not Used
#if [[ -f .python-version ]]; then
#    echo "Current Python set by '.python-version': $(cat .python-version)"
#else
#    echo "'.python-version is NOT seting version "
#fi

[[ $(command -v python ) ]] && echo "Current Python  version: $(python -V)"
[[ $(command -v python3 ) ]] && echo "Current Python3 version: $(python3 -V)"

echo ""
echo "Docker settings..."
if [[ $(command -v docker) ]]; then
	if [[ -f "$HOME"/.docker-config ]]; then  
		DOCKER_CONFIG=$(cat "$HOME"/.docker-config)
		case "$DOCKER_CONFIG" in
		"rootfull")     unset DOCKER_HOST; docker context use default >/dev/null 2>/dev/null;  echo "    Setting Docker Context to rootfull (default)";;
		"rootless")     unset DOCKER_HOST; docker context use rootless >/dev/null 2>/dev/null; echo "    Setting Docker Context to rootless";;
		"docker_host")  docker context use rootless >/dev/null 2>/dev/null; 
		                echo      "WARNING: Setting DOCKER_HOST for Rootless";
		                export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock
		                ;;
		*)  echo "    ERROR: Unknown value in .docker-config file: <$DOCKER_CONFIG>";;
		esac
	 else
		echo "    No .docker-config file found, so setting Docker Context as Default"
		if [[ $(docker --version) ]]; then
		    docker context use default >/dev/null 2>/dev/null
		fi
	fi
	echo "    Confirming Docker Context is: $(docker context show)"
	echo "    Note: DOCKER_HOST is <$DOCKER_HOST>"
else
	echo "    Docker not installed"
fi
echo "Docker settings end"
echo ""

##LUAROCKS
[[ $(command -v luarocks) ]] && eval "$(luarocks path --bin)"

# Set up fzf key bindings and fuzzy completion
[[ $(command -v fzf) ]] &&  eval "$(fzf --bash)"

#export GPGME_DEBUG=9:$HOME/mygpgme.log
# Password Store
#export PASSWORD_STORE_GPG_OPTS=--pinentry-mode=loopback
#export PASSWORD_STORE_GPG_OPTS=--pinentry-mode=ask
# export PASSWORD_STORE_GPG_OPTS="--pinentry=loopback --passphrase-file /path/to/.passphrase"

##NOTES PinEntry
## apt install pinentry-curses
## apt install pinentry-tty
## update-alternatives --config pinentry
## Select TTY
GPG_TTY=$(tty)
echo "Current TTY: $GPG_TTY"
export GPG_TTY
#gpg-connect-agent updatestartuptty /bye
export XAUTHORITY="$HOME"/.Xauthority

###Doesn't seem to work woth Flox: eval "$(starship init bash)"

echo "ChezMoi Alias: czm"
echo "Chezmoi: End .bashrc"
##echo "Use 'pya' to activate python"
if [[ $(command -v flox ) ]]; then
    echo "FLOX is installed"
    if [[ -d "$HOME"/.flox ]]; then
    echo "FLOX: To activate a project use, flox activate, or alias fxa"
    eval "$(flox activate -m dev)"
    fi
fi

